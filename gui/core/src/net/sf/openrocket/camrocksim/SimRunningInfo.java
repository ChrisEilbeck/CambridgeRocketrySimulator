/*
%## Copyright (C) 2011, 2016 S.Box
%## 
%## This program is free software; you can redistribute it and/or modify
%## it under the terms of the GNU General Public License as published by
%## the Free Software Foundation; either version 2 of the License, or
%## (at your option) any later version.
%## 
%## This program is distributed in the hope that it will be useful,
%## but WITHOUT ANY WARRANTY; without even the implied warranty of
%## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%## GNU General Public License for more details.
%## 
%## You should have received a copy of the GNU General Public License
%## along with this program; if not, write to the Free Software
%## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

%## SimRunningInfo.java

%## Author: S.Box
%## Created: 2011-10-27

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SimRunningInfo.java
 *
 * Created on 06-Oct-2011, 17:25:18
 */

package net.sf.openrocket.camrocksim;

import java.io.BufferedReader;
import java.io.InputStreamReader;

/**
 *
 * @author sb4p07
 */
public class SimRunningInfo extends javax.swing.JDialog {
	//*Mebers
	public SimulatorInterface Interface;
	LaunchSimulator LS;
	boolean Success;
	
	/** Creates new form SimRunningInfo */
	public SimRunningInfo(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
		Success = false;
	}
	
	public void Fire(SimulatorInterface sInt) {
		Interface = sInt;
		try {
			LS = new LaunchSimulator();
			Thread T = new Thread(LS);
			T.start();
			this.setVisible(true);
			
		} catch (Exception e) {
			
		}
		
	}
	
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		
		jLabel1 = new javax.swing.JLabel();
		SimKillButton = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		SimOutputText = new javax.swing.JTextArea();
		
		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("Simulator running please wait...");
		
		jLabel1.setText("Simulator Messages:");
		
		SimKillButton.setText("Kill");
		SimKillButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				SimKillButtonActionPerformed(evt);
			}
		});
		
		SimOutputText.setBackground(java.awt.Color.black);
		SimOutputText.setColumns(20);
		SimOutputText.setEditable(false);
		SimOutputText.setForeground(java.awt.Color.white);
		SimOutputText.setRows(5);
		SimOutputText.setCaretColor(java.awt.Color.white);
		SimOutputText.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
		jScrollPane1.setViewportView(SimOutputText);
		
		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(layout.createSequentialGroup()
												.addGap(12, 12, 12)
												.addComponent(jLabel1))
										.addGroup(layout.createSequentialGroup()
												.addContainerGap()
												.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE))
										.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
												.addContainerGap()
												.addComponent(SimKillButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addContainerGap()));
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addGap(15, 15, 15)
								.addComponent(jLabel1)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(SimKillButton)
								.addContainerGap(33, Short.MAX_VALUE)));
		
		pack();
	}// </editor-fold>//GEN-END:initComponents
	
	private void SimKillButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SimKillButtonActionPerformed
		LS.Pr.destroy();
		dispose();
	}//GEN-LAST:event_SimKillButtonActionPerformed
	
	/**
	* @param args the command line arguments
	*/
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				SimRunningInfo dialog = new SimRunningInfo(new javax.swing.JFrame(), true);
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {
					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}
	
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton SimKillButton;
	private javax.swing.JTextArea SimOutputText;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JScrollPane jScrollPane1;
	// End of variables declaration//GEN-END:variables
	
	public class LaunchSimulator implements Runnable {
		Process Pr;
		
		public void run() {
			
			try {
				Runtime rtime = Runtime.getRuntime();
				String[] Command = new String[] { Interface.TheSimulator.getCanonicalPath(), Interface.SimulationIn.getCanonicalPath() };
				Pr = rtime.exec(Command);
				
				BufferedReader input = new BufferedReader(new InputStreamReader(Pr.getInputStream()));
				BufferedReader errors = new BufferedReader(new InputStreamReader(Pr.getErrorStream()));
				
				String line = null;
				while ((line = input.readLine()) != null) {
					SimOutputText.append(line + '\n');
					//System.out.println(line);
					if (line.contains("Simulation Complete")) {
						Success = true;
					}
				}
				
				while ((line = errors.readLine()) != null) {
					SimOutputText.append(line + '\n');
					//System.out.println(line);
					
				}
				if (Success) {
					dispose();
				} else {
					SimOutputText.append("There was an undiagnosed error in the simulation,\n please check your rocket design.\n");
				}
				
			} catch (Exception e) {
				SimOutputText.append("Simulator terminated early");
				dispose();
			}
			
		}
	}
	
	
}
